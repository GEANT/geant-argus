@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  :root:has(:is(.modal-open, .modal:target, .modal-toggle:checked + .modal, .modal[open])) {
    overflow: unset;
    scrollbar-gutter: unset;
  }

  #table {
    @apply border-spacing-0;
  }

  .input,
  .checkbox,
  .select,
  .radio {
    background-color: white;
  }

  .htmx-loading-pulse.htmx-request {
    @apply animate-pulse;
  }

  /* Hide default +/- buttons on numberinputs with .hide-buttons class*/
  /* Chrome, Safari, Edge, Opera */
  input::-webkit-outer-spin-button.hide-buttons,
  input::-webkit-inner-spin-button.hide-buttons {
    -webkit-appearance: none;
    margin: 0;
  }
  /* Firefox */
  input[type="number"].hide-buttons {
    -moz-appearance: textfield;
  }

  /*Ack checkboxes need to stop blinking after firing an htmx request */
  .ack-checkbox.htmx-request {
    animation: none;
  }

  .htmx-indicator-hidden:not(.htmx-request) > .htmx-indicator {
    display: none;
  }
  .htmx-indicator-hidden.htmx-request > .htmx-loading-hidden {
    display: none;
  }

  .badge.incident-critical {
    background-color: rgba(var(--color-incident-critical));
    border: none;
  }
  .badge.incident-critical.incident-closed {
    background-color: rgba(var(--color-incident-critical), 0.5);
    border: none;
  }
  .badge.incident-major {
    background-color: rgba(var(--color-incident-major));
    border: none;
  }
  .badge.incident-major.incident-closed {
    background-color: rgba(var(--color-incident-major), 0.5);
    border: none;
  }
  .badge.incident-minor {
    background-color: rgba(var(--color-incident-minor));
    border: none;
  }
  .badge.incident-minor.incident-closed {
    background-color: rgba(var(--color-incident-minor), 0.5);
    border: none;
  }
  .badge.incident-default {
    @apply bg-base-100;
    @apply border-neutral-content/80;
  }
  .badge.incident-clear {
    background-color: rgba(var(--color-incident-clear));
    border: none;
  }

  .row-collapse {
    display: grid;
  }
  .endpoints-table {
    display: grid;
    grid-template-columns: 1fr;
  }

  /*
  Currently every endpoints table has the same number of columns and relative column width. If
  we want a endpoints table with a different number of column or relative widths (ie custom
  grid-template-columns setting, we should select on the #<endpoint_type>-endpoints-table id
  that is assigned to that table eg:

  #bgp-endpoints-table.endpoints-table .headers,
  #bgp-endpoints-table.endpoints-table .table-row {
    grid-template-columns: 1fr 2fr 3fr;
  }
  */
  .endpoints-table .table-headers,
  .endpoints-table .table-row {
    display: grid;
    grid-template-columns: 2fr 3fr 1fr 1fr 2fr 2fr 1fr 1fr;
  }
  .row-collapse .row-collapse-btn:after {
    height: 0.5rem;
    width: 0.5rem;
    content: "";
    box-shadow: 2px 2px;
    --tw-translate-y: -50%;
    --tw-rotate: 45deg;
    transform-origin: 75% 75%;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x))
      skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    transition-duration: 150ms;
    transition-duration: 0.2s;
  }
  .row-collapse.open .row-collapse-btn:after {
    --tw-translate-y: 0;
    --tw-rotate: 225deg;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x))
      skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  }
  .row-collapse:not(.open) .row-collapse-content {
    display: none;
  }
}
